proxy_cache_path /cache keys_zone=rdfcache:100m levels=1:2 inactive=100d max_size=1G;

server {
    listen       80 default_server;
    server_name  _;
    server_name_in_redirect off;
    port_in_redirect off;
    resolver 8.8.8.8 8.8.4.4; #docker dns is 127.0.0.11 (for when you want to debug)

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    location /is-ready.txt {
        alias   /usr/share/nginx/html/is-ready.txt;
    }

    location %PREFIXPATH% {
        alias   /usr/share/nginx/html/;
        index  index.html index.htm;
    }

    location /proxy {
        set_unescape_uri $redirect_url $arg_url;
        proxy_pass $redirect_url;
        
        #cache the results
        proxy_cache       rdfcache;
        proxy_cache_key   $redirect_url$http_accept ;
        proxy_cache_valid 200 206 3000h;
        proxy_cache_revalidate on;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504 http_403 http_404;
        proxy_cache_lock on;
        add_header X-Cache-Status $upstream_cache_status;

        #have nginx handle the redirects
        proxy_intercept_errors on;
        error_page 301 302 303 307 = @handle_redirects;
    }

    location @handle_redirects {
        #store the current state of the world so we can reuse it in a minute
        # We need to capture these values now, because as soon as we invoke 
        # the proxy_* directives, these will disappear
        set $original_uri $uri;
        set $original_accept $http_accept;
        set $orig_loc $upstream_http_location;

        # nginx goes to fetch the value from the upstream Location header
        proxy_set_header Accept $original_accept;
        proxy_pass $orig_loc;
        proxy_cache       rdfcache;
        # But we store the result with the cache key of the original request URI
        # so that future clients don't need to follow the redirect too
        proxy_cache_key $original_uri$original_accept;
        proxy_cache_valid 200 206 3000h;
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
